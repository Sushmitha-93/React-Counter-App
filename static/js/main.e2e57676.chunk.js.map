{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","_ref","totalCounters","react_default","a","createElement","className","href","style","fontSize","Counter","styles","_this2","this","console","log","props","Fragment","children","getBadgeClass","formatCount","onClick","onIncrement","counter","onDecrement","onDelete","id","badgeClass","value","Component","Counters","_this$props","onReset","counters","onInsert","width","map","components_counter","key","App","state","handleIncrement","Object","toConsumableArray","_this","index","indexOf","setState","handleDecrement","handleDelete","counterID","filter","val","handleInsert","counterId","length","push","handleReset","components_navbar","c","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2e57676.chunk.js","sourcesContent":["import React, { Component } from \"react\"; //imrc\r\nimport \"../navbar.css\";\r\n\r\n//STATELESS FUNCTION COMPONENT (sfc) instead of using Class to define component\r\nconst Navbar = ({ totalCounters }) => {\r\n  //Object destructuring using {}\r\n  return (\r\n    <nav className=\"navbar navbar-light navColor\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Navbar\r\n      </a>\r\n      <div className=\"float-right\">\r\n        Counters Running\r\n        <span\r\n          className=\"badge badge-info badge-pill ml-2\"\r\n          style={{ fontSize: 20 }}\r\n        >\r\n          {/* {this.props.totalCounters} */} {/* \"this\" Only works in Class */}\r\n          {/* {props.totalCounters} */}\r\n          {/* if props is taken as argument in function */}\r\n          {totalCounters}\r\n        </span>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n\r\n// class Navbar extends Component {\r\n//   render() {\r\n//     return (\r\n//       <nav className=\"navbar navbar-light navColor\">\r\n//         <a className=\"navbar-brand\" href=\"#\">\r\n//           Navbar\r\n//           <span className=\"badge badge-info badge-pill m-2\">\r\n//             {this.props.totalCounters}\r\n//           </span>\r\n//         </a>\r\n//       </nav>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Navbar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  // state = {\r\n  //   count: this.props.counter.value,\r\n  //   tags: [\"tag1\", \"tag2\", \"tag3\"]\r\n  // };\r\n\r\n  styles = {\r\n    fontSize: 18\r\n  };\r\n\r\n  //   constructor() {\r\n  //     super(); // Must call constructor of parent class \"Component\" before calling child class constructor\r\n  //     //console.log(\"Constructor\", this);\r\n  //     this.handleIncrement = this.handleIncrement.bind(this);\r\n  //   }\r\n\r\n  // renderTags() {\r\n  //   if (this.state.tags.length === 0) return <p>There are no tags!</p>;\r\n  //   return (\r\n  //     <ul>\r\n  //       {this.state.tags.map(value => (\r\n  //         <li key={value}>{value}</li>\r\n  //       ))}\r\n  //     </ul>\r\n  //   );\r\n  // }\r\n\r\n  //   handleIncrement() {\r\n  //     console.log(\"Incremmented count \", this); // this is \"Undefined\" if bind function is not called in constuctor\r\n  //   }\r\n\r\n  //Converting above function to arrow function to inherit \"this\" by default\r\n  // handleIncrement = () => {\r\n  //   //this.state.count++; //Count will increment but Rect doesnt know its changed and wont update DOM dynamically even if it is linked.\r\n\r\n  //   //so we use setState() method of Component class\r\n  //   this.setState({ count: this.state.count + 1 });\r\n\r\n  //   console.log(\"Incremented count \", this);\r\n  //   // console.log(prodID); // if prodID is parameter to handleIncrement function\r\n  // };\r\n\r\n  //***** Render Function *****/\r\n  render() {\r\n    console.log(\"props \", this.props);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {this.props.children}\r\n        <span style={this.styles} className={this.getBadgeClass()}>\r\n          {this.formatCount()}\r\n        </span>\r\n\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          // To pass argument to event handling function - handleIncrement(prodID)\r\n          // onClick={() => {\r\n          //   this.handleIncrement({ id: 1 });\r\n          // }}\r\n\r\n          style={{ fontSize: 16 }}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          +\r\n        </button>\r\n\r\n        <button\r\n          className=\"btn btn-secondary btn-sm mx-2\"\r\n          style={{ fontSize: 16 }}\r\n          onClick={() => {\r\n            this.props.onDecrement(this.props.counter);\r\n          }}\r\n        >\r\n          -\r\n        </button>\r\n\r\n        <button\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n        >\r\n          Delete\r\n        </button>\r\n\r\n        {/* To conditionally render expression use && */}\r\n        {/* {this.state.tags.length === 0 && <p>Create more tags!</p>} */}\r\n        {/* {this.renderTags()}  */}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  getBadgeClass() {\r\n    let badgeClass = \"badge m-2 badge-\";\r\n    badgeClass += this.props.counter.value === 0 ? \"warning\" : \"primary mx-4\";\r\n    return badgeClass;\r\n  }\r\n\r\n  formatCount() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  //Render fucntion\r\n  render() {\r\n    //   Object destructuring\r\n    const {\r\n      onIncrement,\r\n      onDelete,\r\n      onReset,\r\n      counters,\r\n      onDecrement,\r\n      onInsert\r\n    } = this.props;\r\n\r\n    //Return - returning JSX\r\n    return (\r\n      <div className=\"card mx-auto\" style={{ width: 300 }}>\r\n        <div className=\"card-body\">\r\n          <button\r\n            className=\"btn btn-primary btn-sm mx-2 mb-2\"\r\n            onClick={onReset}\r\n          >\r\n            Reset\r\n          </button>\r\n\r\n          <button className=\"btn btn-success btn-sm mb-2\" onClick={onInsert}>\r\n            Insert\r\n          </button>\r\n\r\n          {/* Rendering each counter in counters as separate components */}\r\n          {counters.map(counter => (\r\n            <Counter //passing properties to Counter from Counters\r\n              key={counter.id}\r\n              counter={counter}\r\n              onDelete={onDelete}\r\n              onIncrement={onIncrement}\r\n              onDecrement={onDecrement}\r\n            >\r\n              <h4>Counter #{counter.id}</h4>\r\n            </Counter>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nimport Navbar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ]\n  };\n\n  handleIncrement = counter => {\n    //console.log(counter);\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleDecrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    if (counters[index].value > 0) counters[index].value--;\n    this.setState({ counters });\n  };\n\n  handleDelete = counterID => {\n    console.log(\"Delete Handling function called \", counterID);\n    const counters = this.state.counters.filter(val => val.id !== counterID);\n    this.setState({ counters });\n  };\n\n  handleInsert = () => {\n    const counters = [...this.state.counters]; //copy state.counters to local counters\n    let counterId;\n    if (counters.length == 0) counterId = 0;\n    else counterId = counters[counters.length - 1].id + 1;\n    counters.push({\n      id: counterId,\n      value: 0\n    });\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map(val => {\n      val.value = 0;\n      return val;\n    });\n    this.setState({ counters });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <br />\n        <Counters\n          counters={this.state.counters}\n          onDelete={this.handleDelete}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onInsert={this.handleInsert}\n          onReset={this.handleReset}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}